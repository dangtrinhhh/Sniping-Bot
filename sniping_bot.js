const ethers = require('ethers');
const Web3 = require('web3');
const fs = require('fs');

// ƒê√¢y l√† th√¥ng tin provider c·ªßa network b·∫°n mu·ªën k·∫øt n·ªëi. Trong v√≠ d·ª• l√† c·ªßa testnet BSC. Nh·ªØng th√¥ng tin n√†y b·∫°n c√≥ th·ªÉ t√¨m ƒë∆°n gi·∫£n tr√™n document c·ªßa h·ªç
const providerPath = "wss://bsc-mainnet.core.chainstack.com/ws/5cf621a34e450d8b7f93a3db5a64bd9b"; // chainstack
const provider = new ethers.WebSocketProvider(providerPath);

// mnemonic l√† t·ª´ kh√≥a b√≠ m·∫≠t khi b·∫°n t·∫°o v√≠. C√≥ th·ªÉ l√† 12 t·ª´ ho·∫∑c 24 t·ª´
const mnemonic = "design dust ahead ball leg hidden response wall speed fiscal slim warrior"; // metamask

let wallet, account;

// Define the addresses object
const addresses = {
    factory: "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73", // factory contract address l·∫•y t·ª´ pancakeswap
    SYMBOL: "BNB" // desired symbol, v√≠ d·ª• "BNB"
};

const eth_getBlockByNumber = async () => {
    const blockByNumber = await provider.send("eth_getBlockByNumber", ["pending", false]);
    const transactions = blockByNumber.transactions;
    const first20Transactions = transactions.slice(0, 20);
    
    //console.log("Transactions array:", transactions);
    console.log("First 20 transactions:", first20Transactions);
  };
  
eth_getBlockByNumber();

async function init() {
    // trong 1 c√°i v√≠ b·∫°n t∆∞·ªüng t∆∞·ª£ng th∆∞·ªùng c√≥ nhi·ªÅu ngƒÉn. ·ªû ƒë√¢y c≈©ng v·∫≠y, wallet ƒëi·ªán t·ª≠ c≈©ng s·∫Ω c√≥ nhi·ªÅu ngƒÉn, m·ªôt ngƒÉn t∆∞∆°ng ƒë∆∞∆°ng v·ªõi m·ªôt address kh√°c nhau.
    // "m/44'/60'/0'/0/0" l√† ch·ªâ ra m√¨nh mu·ªën l·∫•y address ·ªü v·ªã tr√≠ ƒë·∫ßu ti√™n index = 0
    // n·∫øu b·∫°n mu·ªën tr·ªè ƒë·∫øn address v·ªã tr√≠ th·ª© 2 th√¨ s·∫Ω l√† "m/44'/60'/0'/0/1"
    wallet = ethers.Wallet.fromPhrase(mnemonic, "m/44'/60'/0'/0/0");
    
    // b·∫Øt ƒë·∫ßu connect v·ªõi v√≠ tr√™n blockchain
    account = wallet.connect(provider);
    console.log("üöÄ ~ account:", account);
    
    factory = new ethers.Contract(
        addresses.factory,
        [
            'event PairCreated(address indexed token0, address indexed token1, address pair, uint)'
        ],
        account
    );
}

// in th√¥ng tin v√≠
async function getBalance() {
    const balance = await account.provider.getBalance(account.address);
    const ethBalance = ethers.formatUnits(balance, "ether");
    console.log(`
    ACCOUNT INFO
    =================
    Address: ${account.address}
    Balance: ${ethBalance} ${addresses.SYMBOL}
    `);
}

async function listenNewPair() {
    factory.on('PairCreated', async (token0, token1, pairAddress) => {
        // khi c√≥ c·∫∑p list s√†n, th√¨ h√†m n√†y s·∫Ω ƒë∆∞·ª£c ch·∫°y v√† print cho ch√∫ng ta th√¥ng tin c·ªßa c·∫∑p ƒë√≥.
        // token0: l√† ƒë·ªãa ch·ªâ c·ªßa token m·ªõi ƒë∆∞·ª£c t·∫°o ho·∫∑c c≈©ng c√≥ th·∫ø l√† BNB
        // token1: l√† ƒë·ªãa ch·ªâ c·ªßa token m·ªõi ƒë∆∞·ª£c t·∫°o ho·∫∑c c≈©ng c√≥ th·ªÉ l√† BNB
        // nghƒ©a l√† n·∫øu token0 l√† ƒë·ªãa ch·ªâ c·ªßa BNB th√¨ token1 l√† ƒë·ªãa ch·ªâ c·ªßa token m·ªõi ƒë∆∞·ª£c t·∫°o v√† ng∆∞·ª£c l·∫°i
        // pairAddress: l√† ƒë·ªãa ch·ªâ c·ªßa c·∫∑p thanh kho·∫£n
        console.log(`
        =================
        token0: ${token0}
        token1: ${token1}
        pairAddress: ${pairAddress}
        =================
        `);
        
        // Ki·ªÉm tra n·∫øu c·∫∑p c√≥ BNB th√¨ m·ªõi nh·∫≠n
        const BNB = "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c";

        let tokenIn, tokenOut;
        if(token0 === BNB) {
          tokenIn = token0; 
          tokenOut = token1;
        }
        
        if(token1 == BNB) {
          tokenIn = token1; 
          tokenOut = token0;
        }
        
        if(typeof tokenIn === 'undefined') {
              return;
        }
    });
}

async function main() {
    await init();
    await getBalance();
    await listenNewPair();
}

main();
